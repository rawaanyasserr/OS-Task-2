#include <stdio.h>
#include <stdlib.h>

#define COUNTER_BITS 8

typedef struct {
    int page_id;
    unsigned char counter;
} Page;

void initialize_pages(Page *pages, int num_frames) {
    for (int i = 0; i < num_frames; i++) {
        pages[i].page_id = -1;
        pages[i].counter = 0;
    }
}

int find_page_to_replace(Page *pages, int num_frames) {
    int min_index = 0;
    unsigned char min_counter = pages[0].counter;

    for (int i = 1; i < num_frames; i++) {
        if (pages[i].counter < min_counter) {
            min_counter = pages[i].counter;
            min_index = i;
        }
    }
    return min_index;
}

int simulate_aging(FILE *input_file, int num_frames) {
    Page pages[num_frames];
    initialize_pages(pages, num_frames);

    int page_faults = 0;
    int page_reference;
    int total_references = 0;

    while (fscanf(input_file, "%d", &page_reference) != EOF) {
        total_references++;

        int page_found = 0;
        for (int i = 0; i < num_frames; i++) {
            if (pages[i].page_id == page_reference) {
                page_found = 1;
                pages[i].counter |= (1 << (COUNTER_BITS - 1));
                break;
            }
        }

        if (!page_found) {
            page_faults++;
            int replace_index = find_page_to_replace(pages, num_frames);
            pages[replace_index].page_id = page_reference;
            pages[replace_index].counter = (1 << (COUNTER_BITS - 1));
        }

        for (int i = 0; i < num_frames; i++) {
            pages[i].counter >>= 1;
        }
    }

    printf("Total references: %d\n", total_references);
    printf("Page faults: %d\n", page_faults);
    return page_faults;
}

int main(int argc, char *argv[]) {
    if (argc != 3) {
        printf("Usage: %s <input_file> <num_frames>\n", argv[0]);
        return 1;
    }

    char *input_file_name = argv[1];
    int num_frames = atoi(argv[2]);

    FILE *input_file = fopen(input_file_name, "r");
    if (!input_file) {
        perror("Error opening input file");
        return 1;
    }

    int page_faults = simulate_aging(input_file, num_frames);
    fclose(input_file);

    printf("Page faults per 1000 references: %.2f\n", (float)page_faults * 1000 / 1000);

    return 0;
}
