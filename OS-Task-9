#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int id;
    int arrival_time;
    int burst_time;
    int remaining_time;
} Process;

int compare_arrival(const void *a, const void *b) {
    Process *p1 = (Process *)a;
    Process *p2 = (Process *)b;
    return p1->arrival_time - p2->arrival_time;
}

void fcfs(Process processes[], int n) {
    qsort(processes, n, sizeof(Process), compare_arrival);

    int waiting_time[n];
    int total_waiting_time = 0;
    int current_time = 0;

    for (int i = 0; i < n; i++) {
        if (current_time < processes[i].arrival_time)
            current_time = processes[i].arrival_time;

        waiting_time[i] = current_time - processes[i].arrival_time;
        total_waiting_time += waiting_time[i];
        current_time += processes[i].burst_time;
    }

    printf("FCFS Scheduling:\n");
    printf("Process\tWaiting Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\n", processes[i].id, waiting_time[i]);
    }
    printf("Average Waiting Time: %.2f\n\n", (float)total_waiting_time / n);
}

void sjf(Process processes[], int n) {
    int waiting_time[n];
    int total_waiting_time = 0;
    int completed = 0;
    int current_time = 0;

    for (int i = 0; i < n; i++) {
        processes[i].remaining_time = processes[i].burst_time;
    }

    while (completed != n) {
        int shortest = -1;
        int min_burst = 9999;

        for (int i = 0; i < n; i++) {
            if (processes[i].arrival_time <= current_time && 
                processes[i].remaining_time < min_burst &&
                processes[i].remaining_time > 0) {
                shortest = i;
                min_burst = processes[i].remaining_time;
            }
        }

        if (shortest == -1) {
            current_time++;
            continue;
        }

        processes[shortest].remaining_time--;
        current_time++;

        if (processes[shortest].remaining_time == 0) {
            completed++;
            waiting_time[shortest] = current_time - processes[shortest].arrival_time - processes[shortest].burst_time;
            total_waiting_time += waiting_time[shortest];
        }
    }

    printf("SJF Scheduling:\n");
    printf("Process\tWaiting Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\n", processes[i].id, waiting_time[i]);
    }
    printf("Average Waiting Time: %.2f\n\n", (float)total_waiting_time / n);
}

void round_robin(Process processes[], int n, int quantum) {
    int waiting_time[n];
    int remaining_time[n];
    int arrival_time[n];
    int burst_time[n];

    for (int i = 0; i < n; i++) {
        remaining_time[i] = processes[i].burst_time;
        arrival_time[i] = processes[i].arrival_time;
        burst_time[i] = processes[i].burst_time;
        waiting_time[i] = 0;
    }

    int current_time = 0, completed = 0;
    int mark[n];
    for (int i = 0; i < n; i++) mark[i] = 0;

    int queue[n * 10]; 
    int front = 0, rear = 0;
    int earliest = 0;
    for (int i = 1; i < n; i++) {
        if (arrival_time[i] < arrival_time[earliest]) {
            earliest = i;
        }
    }
    queue[rear++] = earliest;
    mark[earliest] = 1;

    while (completed != n) {
        if (front == rear) {
            current_time++;
          
            for (int i = 0; i < n; i++) {
                if (!mark[i] && arrival_time[i] <= current_time) {
                    queue[rear++] = i;
                    mark[i] = 1;
                }
            }
            continue;
        }

        int i = queue[front++];

        if (arrival_time[i] > current_time) {
            front--;
            current_time++;
            continue;
        }

        int exec_time = (remaining_time[i] > quantum) ? quantum : remaining_time[i];
        current_time += exec_time;
        remaining_time[i] -= exec_time;

        
        for (int j = 0; j < n; j++) {
            if (!mark[j] && arrival_time[j] <= current_time) {
                queue[rear++] = j;
                mark[j] = 1;
            }
        }

        if (remaining_time[i] > 0) {
            queue[rear++] = i; 
        } else {
            completed++;
            waiting_time[i] = current_time - arrival_time[i] - burst_time[i];
        }
    }

    int total_waiting_time = 0;
    for (int i = 0; i < n; i++) {
        total_waiting_time += waiting_time[i];
    }

    printf("Round Robin Scheduling (Quantum = %d):\n", quantum);
    printf("Process\tWaiting Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\n", processes[i].id, waiting_time[i]);
    }
    printf("Average Waiting Time: %.2f\n\n", (float)total_waiting_time / n);
}


int main() {
    int n, quantum;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    Process processes[n];
    Process backup[n]; 

    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Enter arrival time for process %d: ", i + 1);
        scanf("%d", &processes[i].arrival_time);
        printf("Enter burst time for process %d: ", i + 1);
        scanf("%d", &processes[i].burst_time);
        backup[i] = processes[i]; 
    }

    printf("Enter the time quantum for Round Robin: ");
    scanf("%d", &quantum);

    fcfs(processes, n);

   
    for (int i = 0; i < n; i++) processes[i] = backup[i];
    sjf(processes, n);

    for (int i = 0; i < n; i++) processes[i] = backup[i];
    round_robin(processes, n, quantum);

    return 0;
}
